// <auto-generated />
using System;
using Gram.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gram.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gram.Domain.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<int>("PersonId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StatusDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasName("IX_Attendance_Event");

                    b.HasIndex("PersonId")
                        .HasName("IX_Attendance_Person");

                    b.HasIndex("StatusId")
                        .HasName("IX_Attendance_Status");

                    b.HasIndex("EventId", "PersonId")
                        .IsUnique()
                        .HasName("UQ_Attendance_Event_Person");

                    b.ToTable("Attendance","Events");
                });

            modelBuilder.Entity("Gram.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateOfEmployment")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EmploymentExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .HasName("IX_Employee_Person");

                    b.ToTable("Employee","Subjects");
                });

            modelBuilder.Entity("Gram.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("date");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("EventStatusId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EventStatusId")
                        .HasName("IX_Event_EventStatus");

                    b.ToTable("Event","Events");
                });

            modelBuilder.Entity("Gram.Domain.Entities.GeneralType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsFixed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsListed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int?>("ParentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasName("IX_GeneralType_Parent");

                    b.HasIndex("Title", "ParentId")
                        .IsUnique()
                        .HasName("UQ_GeneralType_Title_Parent");

                    b.ToTable("GeneralType","General");
                });

            modelBuilder.Entity("Gram.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("NationalityId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("NationalityId")
                        .HasName("IX_Person_Nationality");

                    b.ToTable("Person","Subjects");
                });

            modelBuilder.Entity("Gram.Domain.Entities.Attendance", b =>
                {
                    b.HasOne("Gram.Domain.Entities.Event", "Event")
                        .WithMany("Attendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gram.Domain.Entities.Person", "Person")
                        .WithMany("Attendees")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Gram.Domain.Entities.GeneralType", "Status")
                        .WithMany("AttendanceStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Gram.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Gram.Domain.Entities.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Gram.Domain.Entities.Event", b =>
                {
                    b.HasOne("Gram.Domain.Entities.GeneralType", "EventStatus")
                        .WithMany("EventStatuses")
                        .HasForeignKey("EventStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Gram.Domain.Entities.GeneralType", b =>
                {
                    b.HasOne("Gram.Domain.Entities.GeneralType", "Parent")
                        .WithMany("ChildTypes")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Gram.Domain.Entities.Person", b =>
                {
                    b.HasOne("Gram.Domain.Entities.GeneralType", "Nationality")
                        .WithMany("PersonNationalities")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
